#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require("../app");
const debug = require("debug")("backend:server");
const http = require("node:http");
const { initializeSocket } = require("../config/socket");
const { setSocketIo } = require("../controllers/userController");

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Initialize Socket.IO
 */

// Inisialisasi socket.io dengan server yang sudah dibuat
const io = initializeSocket(server);
console.log("Socket.IO initialized in bin/www");

// Inject `io` ke controller
setSocketIo(io);
console.log("Socket.IO injected to userController");

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
	const port = Number.parseInt(val, 10);

	if (Number.isNaN(port)) {
		return val;
	}
	if (port >= 0) {
		return port;
	}
	return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
	if (error.syscall !== "listen") {
		throw error;
	}

	const bind = typeof port === "string" ? `Pipe ${port}` : `Port ${port}`;

	switch (error.code) {
		case "EACCES":
			console.error(`${bind} requires elevated privileges`);
			process.exit(1);
			break;
		case "EADDRINUSE":
			console.error(`${bind} is already in use`);
			process.exit(1);
			break;
		default:
			throw error;
	}
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
	const addr = server.address();
	const bind = typeof addr === "string" ? `pipe ${addr}` : `port ${addr.port}`;
	debug(`Listening on ${bind}`);
}
